{:style [:community :justified :map-nl :pair-nl :binding-nl :respect-bl]
 :width 100
 :map {:comma?    false
       :sort?     false
       :force-nl? true}
 :pair {:force-nl? true}
 :fn-force-nl #{:arg1-body :arg2 :binding :fn}
 :fn-map
 {;; clojure.core and special forms
  "defn"
  [:arg1-body
   {:next-inner {:list {:respect-nl? true}
                 :next-inner-restore [[:list :respect-nl?]]}}]

  "fn"
  [:fn
   {:next-inner {:list {:respect-nl? true}
                 :next-inner-restore [[:list :respect-nl?]]}}]

  "bound-fn"
  [:fn
   {:next-inner {:list {:respect-nl? true}
                 :next-inner-restore [[:list :respect-nl?]]}}]

  "do" :flow-body
  "try" :flow-body
  "finally" :flow-body

  ;; clj-otel-api
  "bind-context!" :arg1-body
  "with-bound-context!" :flow-body
  "with-bound-span!" :arg1-body
  "with-context!" :arg1-body
  "with-span!" :arg1-body
  "with-span-binding" :binding
  "with-span-binding'" :binding
  "with-value!" :arg1-body

  ;; examples
  "async" :flow-body
  "async-bound-style-span" :arg1-body
  "blocking" :flow-body
  "compute" :flow-body
  "clet" :binding
  "style-span-binding" :binding
  "style-span-binding'" :binding

  ;; core.async
  "go" :flow-body

  ;; clojure.tools.build.api
  "with-project-root" :arg1-body

  ;; Compojure
  "defroutes" :arg1-body}}